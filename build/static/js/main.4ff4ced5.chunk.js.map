{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","App.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-selectors.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","getFilter","state","contacts","filter","getItems","items","getVisibleContacts","allContacts","normalizedFilter","toLowerCase","contact","includes","ContactList","contactList","useSelector","dispatch","useDispatch","className","map","s","contactList__item","type","deleteButton","onClick","onDeleteContact","ContactForm","useState","setName","setNumber","btnEnable","setBtnEnable","nameInputId","numberInputId","handleChange","e","currentTarget","value","find","alert","checkName","form","onSubmit","preventDefault","htmlFor","input","pattern","title","required","onChange","button","disabled","Filter","connect","actions","App","createReducer","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","contactReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.4ff4ced5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3crmn\",\"input\":\"ContactForm_input__1i2w1\",\"button\":\"ContactForm_button__Qa36j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList__item\":\"ContactList_contactList__item__3IBVR\",\"deleteButton\":\"ContactList_deleteButton__356P2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2W_gp\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\n// import types from './contacts-types';\r\n\r\n// export const addContact = ({ name, number }) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n// prepareCallback\r\nexport const addContact = createAction('contacts/add', ({ name, number }) => ({\r\n  payload: {\r\n    id: shortid.generate(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\n// export const deleteContact = id => ({\r\n//   type: types.DELETE,\r\n//   payload: id,\r\n// });\r\n\r\nexport const deleteContact = createAction('contacts/delete');\r\n\r\n// export const changeFilter = value => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n\r\n// export default { addContact, deleteContact, changeFilter };\r\n","export const getFilter = state => state.contacts.filter;\r\nexport const getItems = state => state.contacts.items;\r\n\r\nexport const getVisibleContacts = state => {\r\n  const allContacts = getItems(state);\r\n  const filter = getFilter(state);\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return allContacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n","import React from 'react';\nimport s from './ContactList.module.css';\nimport { deleteContact} from '../../redux/contacts/contacts-actions'\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\n\n  \nexport default function ContactList() {\n\n  // const getVisibleContacts = (allContacts, filter) => {\n  //   const normalizedFilter = filter.toLowerCase();\n\n  //   return allContacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(normalizedFilter),\n  //   );\n  // };\n\n  // const contactList = useSelector(({ contacts: { filter, items } }) => getVisibleContacts(items, filter));\n  const contactList = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n  const onDeleteContact =(id)=> dispatch(deleteContact(id))\n\n\n  return (<>\n    <ul className=\"contactList\">\n      {contactList.map(({ id, name, number }) => (\n        <li key={id} className={s.contactList__item}>\n          {name} : {number}\n          <button\n            type=\"button\"\n            className={s.deleteButton}\n            onClick={() => onDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  </>)\n};\n\n// const mapStateToProps = ({contacts:{filter, items}}) => {\n\n//   return {\n//     contactList: getVisibleContacts(items, filter), \n//   }\n// }\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     onDeleteContact: (id) => dispatch(deleteContact(id)),\n//   }\n// }\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React, {  useState } from 'react';\nimport shortid from 'shortid';\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport s from './ContactForm.module.css';\nimport {addContact, deleteContact, changeFilter} from '../../redux/contacts/contacts-actions'\nimport { getItems } from '../../redux/contacts/contacts-selectors';\n\n// function ContactForm({ onSubmit, contactList }) {\nexport default function ContactForm() {\n  // state = {\n    //   name: '',\n    //   number: '',\n    //   btnEnable: true,\n    // };\n    \n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const [btnEnable, setBtnEnable] = useState(true);\n    \n  const contactList = useSelector(getItems);\n  \n  const dispatch = useDispatch();\n  const onSubmit = () => dispatch(addContact({ name, number }));\n  \n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  const checkName = (name)=> {\n    const check = contactList.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n    if (check) {\n      setBtnEnable(false);\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    setBtnEnable(true);\n  }\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    name === 'name' && checkName(value);\n\n    switch (name) {\n      case 'name': setName(value);        \n        break;\n\n      case 'number': setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    onSubmit({name, number});\n    \n    setName('');\n    setNumber('');\n  };\n\n    return (\n      <form className={s.form} onSubmit={handleSubmit}>\n        <label htmlFor={nameInputId} className={s.input}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleChange}\n            id={nameInputId}\n          />\n        </label>\n\n        <label htmlFor={numberInputId} className={s.input}>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={handleChange}\n            id={numberInputId}\n          />\n        </label>\n        <button\n          type=\"submit\"\n          className={s.button}\n          disabled={!btnEnable}\n        >\n          Add contact\n        </button>\n      </form>\n    );\n}\n\n// export default ContactForm;\n\n// const mapStateToProps = state =>{\n//  return {\n//    contactList: state.contacts.items,\n\n//  }\n// }\n// const mapDispatchToProps = dispatch => {\n// return {\n//     onSubmit: ({name, number}) => dispatch(addContact({name, number}))\n//   }\n// }\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from 'react';\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\n\n\nexport default function Filter() {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const onChange = (e) => dispatch(changeFilter(e.currentTarget.value));\n\n  return (\n    <label>\n      Find contacts by name\n      <input type=\"text\" value={value} onChange={onChange} />\n    </label>\n  );\n};\n\n// export default Filter;\n\n// const mapStateToProps = state => ({\n//   value: state.contacts.filter\n// })\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     onChange: (e)=> dispatch(changeFilter(e.currentTarget.value))\n//   }\n// }\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport ContactList from './components/ContactList';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport s from './App.module.css';\nimport shortid from 'shortid';\nimport * as actions from './redux/contacts/contacts-actions';\n// import { addContact, deleteContact, changeFilter };\n\nfunction App({ contacts, filter, addContact, deleteContact }) {\n  // const [contacts, setContacts] = useState([]);\n  // const [filter, setFilter] = useState('');\n\n  // вместо useEffect используем persist\n  /*useEffect(() => {\n    if (!contacts.length) {\n      const savedContacts = localStorage.getItem('contacts');\n      const parsedContacts = JSON.parse(savedContacts);\n\n      if (parsedContacts) {\n        parsedContacts.map(({ name, number }) => addContact({ name, number }));\n        // setContacts(parsedContacts);\n      }\n      return;\n    }\n    localStorage.setItem('contacts', JSON.stringify(contacts));\n}, [contacts]);\n  */\n\n  // const addContact = ({ name, number }) => {\n  //   const contact = {\n  //     id: shortid.generate(),\n  //     name,\n  //     number,\n  //   };\n\n  //   setContacts([contact, ...contacts]);\n  // };\n  /*\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n*/\n\n  // const deleteContact = contactId => {\n  //   const newContacts = contacts.filter(contact => contact.id !== contactId);\n  //   setContacts(newContacts);\n  // };\n\n  // const visibleContacts = getVisibleContacts();\n\n  return (\n    <div className={s.App}>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList /*contactList={getVisibleContacts}*/ />\n    </div>\n  );\n}\n\n// export default App;\n\nconst mapStateToProps = state => ({\n  contacts: state.contacts.items,\n  filter: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addContact: ({ name, number }) =>\n    dispatch(actions.addContact({ name, number })),\n  deleteContact: () => dispatch(actions.deleteContact()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport { addContact, deleteContact, changeFilter } from './contacts-actions';\r\n// import types from './contacts-types';\r\n\r\n// const filter = createReducer('', {\r\n//   [changeFilter]: (_, { payload }) => payload,\r\n// });\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n\r\n//     case types.DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst items = createReducer([], {\r\n  [addContact]: (state, { payload }) => [...state, payload],\r\n  [deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport contactReducer from './contacts/contacts-reducer';\r\nimport {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  combineReducers,\r\n} from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage'; \r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n// import AuthProvider from './contexts/auth/Provider';\nimport 'react-toastify/dist/ReactToastify.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <AuthProvider> */}\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n    {/* </AuthProvider> */}\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}